Перем Префикс;
Функция СведенияОВнешнейОбработке() Экспорт
	
  ПараметрыРегистрации = Новый Структура;
  ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
  ПараметрыРегистрации.Вставить("Наименование", "Выгрузка_УВФ_Из_Путевого_Листа_За_Период"); //Наименование обработки, которым будет заполнено наименование элемента справочника
  ПараметрыРегистрации.Вставить("Версия", "1.0");
  ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
  ПараметрыРегистрации.Вставить("Информация", "Формирует УВФ по Путевым листам за период (вручную) за прошлый день без установки периода");
  ПараметрыРегистрации.Вставить("ВерсияБСП", "1.2.1.4");
  ТаблицаКоманд = ПолучитьТаблицуКоманд();
  
  ДобавитьКоманду(ТаблицаКоманд,
  "Выгрузка УВФ из путевого листа за период", //представление команды в пользовательском интерфейсе
  "Выгрузка_УВФ_Из_Путевого_Листа_За_Период", //идентификатор команды; любая строка, уникальная в пределах данной обработки
  "ВызовСерверногоМетода");
  ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
  
  ДобавитьКоманду(ТаблицаКоманд,
  "Выгрузка УВФ из путевого листа за период открыть форму", //представление команды в пользовательском интерфейсе
  "Выгрузка_УВФ_Из_Путевого_Листа_За_Период", //идентификатор команды; любая строка, уникальная в пределах данной обработки
  "ОткрытиеФормы",                            // Использование команды
  Истина,                                  // Показывать оповещение.
  "ПечатьMXL"                              // Дополнительный модификатор команды.
  );  
  Возврат ПараметрыРегистрации;
  
КонецФункции

Функция ПолучитьТаблицуКоманд()
  Команды = Новый ТаблицаЗначений;
  Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
  Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
  Возврат Команды;
КонецФункции  

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	// Реализация логики команды
	Период = Неопределено;
	ПереформировыватьУВФ = Ложь;
	ПараметрыВыполненияКоманды.Свойство("Период",Период);
	ПараметрыВыполненияКоманды.Свойство("ПереформировыватьУВФ",ПереформировыватьУВФ);	
	Если ИдентификаторКоманды = "Выгрузка_УВФ_Из_Путевого_Листа_За_Период" Тогда		
		Выгрузка_УВФ_Из_Путевого_Листа_За_Период(Период,ПереформировыватьУВФ);
	КонецЕсли;
			
КонецПроцедуры

Процедура Выгрузка_УВФ_Из_Путевого_Листа_За_Период(Период,ПереформировыватьУВФ = Ложь)
	
	//Определяем параметры форирования 
	Если Период = Неопределено Тогда
		
		Период = Новый СтандартныйПериод();
		Период.ДатаНачала = НачалоДня(ТекущаяДата()-86400); 
		Период.ДатаОкончания = КонецДня(Период.ДатаНачала); 
		
	КонецЕсли;
	
	//Получим 
	
	 	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Логистика_РейсЗаводскойТранспорт.Ссылка,
		|	Логистика_РейсЗаводскойТранспорт.НРабот,
		|	Логистика_РейсЗаводскойТранспорт.КРабот,
		|	Логистика_РейсЗаводскойТранспорт.Водитель,
		|	Логистика_РейсЗаводскойТранспорт.Транспорт,
		|	ЕСТЬNULL(Логистика_ТранспортСменаСрезПоследних.Смена, 0) КАК Смена,
		|	Логистика_РейсЗаводскойТранспорт.ВодительГрузчик,
		|	Логистика_РейсЗаводскойТранспорт.ОбщиеМотоЧасы
		|ИЗ
		|	Документ.Логистика_РейсЗаводскойТранспорт КАК Логистика_РейсЗаводскойТранспорт
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Логистика_ТранспортСмена.СрезПоследних(, ) КАК Логистика_ТранспортСменаСрезПоследних
		|		ПО Логистика_РейсЗаводскойТранспорт.Транспорт = Логистика_ТранспортСменаСрезПоследних.Автотранспорт
		|			И (РАЗНОСТЬДАТ(Логистика_РейсЗаводскойТранспорт.НРабот, НАЧАЛОПЕРИОДА(Логистика_РейсЗаводскойТранспорт.НРабот, ДЕНЬ), СЕКУНДА) = РАЗНОСТЬДАТ(Логистика_ТранспортСменаСрезПоследних.ДатаНачала, НАЧАЛОПЕРИОДА(Логистика_ТранспортСменаСрезПоследних.ДатаНачала, ДЕНЬ), СЕКУНДА))
		|			И (РАЗНОСТЬДАТ(Логистика_РейсЗаводскойТранспорт.КРабот, НАЧАЛОПЕРИОДА(Логистика_РейсЗаводскойТранспорт.КРабот, ДЕНЬ), СЕКУНДА) = РАЗНОСТЬДАТ(Логистика_ТранспортСменаСрезПоследних.ДатаКонца, НАЧАЛОПЕРИОДА(Логистика_ТранспортСменаСрезПоследних.ДатаКонца, ДЕНЬ), СЕКУНДА))
		|ГДЕ
		|	Логистика_РейсЗаводскойТранспорт.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И Логистика_РейсЗаводскойТранспорт.Проведен";
	
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Ответственный = Справочники.Сотрудники.НайтиПоНаименованию("АСУПРОБОТ");
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//Определим смену
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Автоматический);
		Если ВыборкаДетальныеЗаписи.ОбщиеМотоЧасы <=  0 Тогда
			
			Продолжить	
			
		КонецЕсли;
		
			Попытка

		Смена = ОпределимСмену(ВыборкаДетальныеЗаписи.Смена);
		
		
	   			Если  ВыборкаДетальныеЗаписи.ВодительГрузчик Тогда			
					ТекВидОперации = Справочники.ВидыОпераций.НайтиПоНаименованию("Водитель - Грузчик");
				Иначе			
					ТекВидОперации = Справочники.ВидыОпераций.НайтиПоНаименованию("Водитель - Водитель");
				КонецЕсли;
				ТехОперация = ОпределитьТехнологическуюОперацию(ТекВидОперации);
				
				
				//Посик уже имеющегося УВФ ++
				НовыйДокумент = Ложь;
				ДокУВФ = НайтиСоздатьУВФ(ВыборкаДетальныеЗаписи.Ссылка,НовыйДокумент,ТекВидОперации);
				//Посик уже имеющегося УВФ --

				Если  НЕ НовыйДокумент и НЕ ПереформировыватьУВФ Тогда
					Продолжить;					
				КонецЕсли;
				
				Если ТекВидОперации <> Неопределено Тогда
					ДокУВФ.ВидОперации = ТекВидОперации;
				Иначе 
					ДокУВФ.ВидОперации = Справочники.ВидыОпераций.ПустаяСсылка();
				КонецЕсли; 

				
				ДокУВФ.Дата = ТекущаяДата();
				ДокУВФ.Территория = Справочники.Территории.НайтиПоКоду("000000012");
				ДокУВФ.РабочаяДата = ВыборкаДетальныеЗаписи.НРабот;
				ДокУВФ.Ответственный = Ответственный;
				ДокУВФ.Смена = Смена;
				ДокУВФ.Цех = Перечисления.Цеха.ЦВТ;
				ДокУВФ.Подразделение =  ВыборкаДетальныеЗаписи.Водитель.ГлПодразделение;
				ДокУВФ.БригадныйИндивидуальный = Ложь;
				
				
				ДокУВФ.ДокументОснование = ВыборкаДетальныеЗаписи.Ссылка;
				ДокУВФ.Комментарий = "Создан обработкой автоматически на основании " + ДокУВФ.ДокументОснование;
				ДокУВФ.Записать(РежимЗаписиДокумента.Запись);
				
				ДокУВФ.ВремяНачалаСмены = ВыборкаДетальныеЗаписи.НРабот; 
				ДокУВФ.ВремяокончанияСмены = ВыборкаДетальныеЗаписи.КРабот;
				
				//Строка в ТЧ
				СтрокаНовая = ДокУВФ.Факт.Добавить();
				СтрокаНовая.Сотрудник = ВыборкаДетальныеЗаписи.Водитель;
				СтрокаНовая.Факт = ВыборкаДетальныеЗаписи.ОбщиеМотоЧасы;
				СтрокаНовая.КоличествоОпераций = ВыборкаДетальныеЗаписи.ОбщиеМотоЧасы;
				СтрокаНовая.Операция = ТехОперация;
				СтрокаНовая.Смена = Смена;
				СтрокаНовая.НачалоСмены = ВыборкаДетальныеЗаписи.НРабот; 
				СтрокаНовая.ОкончаниеСмены = ВыборкаДетальныеЗаписи.КРабот;

				//Строка в ТЧ
				
				
				ДокУВФ.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Текущая заявка закосячена начать с нее"+Строка(ВыборкаДетальныеЗаписи.Ссылка),ВыборкаДетальныеЗаписи.Ссылка);
			КонецПопытки;
			
			ЗафиксироватьТранзакцию();

	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
	
		
КонецПроцедуры


Функция НайтиСоздатьУВФ(Заявка,НовыйДокумент,ВидОперации)
	
		//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	НовыйДокумент = Ложь;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УниверсальныйВводФакта.Ссылка
		|ИЗ
		|	Документ.УниверсальныйВводФакта КАК УниверсальныйВводФакта
		|ГДЕ
		|	УниверсальныйВводФакта.ДокументОснование = &ДокументОснование
		|	И УниверсальныйВводФакта.Проведен = &Проведен
		|	И УниверсальныйВводФакта.ВидОперации = &ВидОперации
		|
		|УПОРЯДОЧИТЬ ПО
		|	УниверсальныйВводФакта.Дата";
	
	Запрос.УстановитьПараметр("ДокументОснование", Заявка);
	Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
	Запрос.УстановитьПараметр("Проведен", Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		ВыборкаДетальныеЗаписи.Следующий();
		ОбъектУВФ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОбъектУВФ.Факт.Очистить();
		Возврат ОбъектУВФ;
	Иначе
		НовыйДокумент = Истина;
		Возврат Документы.УниверсальныйВводФакта.СоздатьДокумент();
	КонецЕсли;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

	
КонецФункции

Функция ОпределитьТехнологическуюОперацию(ТехОперация)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОперацийНоменклатуры.ОперацияЗУП
	|ИЗ
	|	РегистрСведений.ВидыОперацийНоменклатуры КАК ВидыОперацийНоменклатуры
	|ГДЕ
	|	ВидыОперацийНоменклатуры.ВидОперации = &ВидОперации
	|	И ВидыОперацийНоменклатуры.Оборудование = &Оборудование
	|	И ВидыОперацийНоменклатуры.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("ВидОперации", ТехОперация);
	Запрос.УстановитьПараметр("Номенклатура", Справочники.Покрышки.ПустаяСсылка());
	Запрос.УстановитьПараметр("Оборудование",Справочники.Оборудование.ПустаяСсылка() );
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.ОперацияЗУП;	
	Иначе
		Возврат Справочники.ТехнологическиеОперации.ПустаяСсылка();	
	КонецЕсли;
	
	
КонецФункции


Функция ОпределимСмену(ЧислоСмена)
	Если ЧислоСмена<=1 тогда
		Возврат  Перечисления.Смены.СменаА;
	ИначеЕсли ЧислоСмена=2 тогда
		Возврат Перечисления.Смены.СменаБ;	
	ИначеЕсли ЧислоСмена=3 тогда
		Возврат Перечисления.Смены.СменаВ;
	КонецЕсли;
КонецФункции

Процедура Выгрузка_УВФ_Из_Путевого_Листа_За_Период11(Период)
	
	//Определяем параметры форирования 
	Если Период = Неопределено Тогда
		
		Период = Новый СтандартныйПериод();
		Период.ДатаНачала = НачалоДня(ТекущаяДата()-86400); 
		Период.ДатаОкончания = КонецДня(Период.ДатаНачала); 
		
	КонецЕсли;
	
	//Получим 
	
		
КонецПроцедуры